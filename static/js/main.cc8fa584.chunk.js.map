{"version":3,"sources":["components/Fliter/Filter.module.css","components/Container/Container.module.css","components/Section/Section.module.css","components/FormAddContact/FormAddContact.module.css","components/Container/Container.js","components/Section/Section.js","components/FormAddContact/FormAddContact.js","components/ContactsList/ContactsList.js","components/Fliter/Filter.js","App.js","index.js","components/ContactsList/ContactsList.module.css"],"names":["module","exports","Container","children","className","style","container","Section","title","protoType","PropTypes","string","FormAddContact","onSubmit","loginInputId","shortid","generate","numberInputId","contactInputId","useState","name","setName","number","setNumber","handleChange","event","currentTarget","value","resetForm","form","preventDefault","id","label","htmlFor","input","type","placeholder","pattern","required","onChange","input_number","button","func","ContactsList","contacts","deleteContact","list","map","contact","item","onClick","Filter","filter","onChangeFilter","App","JSON","parse","localStorage","getItem","setContacts","setFilter","useEffect","window","setItem","stringify","currentId","data","some","includes","alert","toLocaleLowerCase","ReactDom","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.cc8fa584.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__27Gno\",\"input\":\"Filter_input__3om28\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__k-9xm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__i7CDt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"FormAddContact_form__2qUJM\",\"label\":\"FormAddContact_label__1hNYy\",\"input\":\"FormAddContact_input__1M6zJ\",\"input_number\":\"FormAddContact_input_number__coGP7\",\"button\":\"FormAddContact_button__y-75k\"};","import style from './Container.module.css';\n\nfunction Container({ children }) {\n  return <div className={style.container}>{children}</div>;\n}\n\nexport default Container;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport style from './Section.module.css';\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <h2 className={style.title}>{title}</h2>\n      {children}\n    </section>\n  );\n}\n\nSection.protoType = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport style from './FormAddContact.module.css';\n\nexport default function FormAddContact({ onSubmit }) {\n  const loginInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n  const contactInputId = shortid.generate();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const contact = {\n      id: contactInputId,\n      name: name,\n      number: number,\n    };\n\n    onSubmit(contact);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={style.form} onSubmit={handleSubmit}>\n      <label className={style.label} htmlFor={loginInputId}>\n        Name\n        <input\n          className={style.input}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          id={loginInputId}\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n\n      <label className={style.label} htmlFor={numberInputId}>\n        Namber\n        <input\n          className={style.input_number}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Namber\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          id={numberInputId}\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={style.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nFormAddContact.protoType = {\n  onSubmit: PropTypes.func,\n};\n\n// class FormAddContact extends Component {\n//   loginInputId = shortid.generate();\n//   numberInputId = shortid.generate();\n//   contactInputId = shortid.generate();\n\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChange = event => {\n//     const { name, value } = event.currentTarget;\n//     // console.log(event.currentTarget);\n//     // console.log(event.currentTarget.name);\n//     // console.log(event.currentTarget.value);\n\n//     this.setState({\n//       // [event.currentTarget.name]: event.currentTarget.value,\n//       [name]: value,\n//     });\n//   };\n\n//   handleSubmit = event => {\n//     event.preventDefault();\n\n//     // console.log(this.state);\n\n//     const contact = {\n//       id: shortid.generate(),\n//       name: this.state.name,\n//       number: this.state.number,\n//     };\n\n//     this.props.onSubmit(contact);\n//     this.resetForm();\n//   };\n\n//   resetForm = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <form className={style.form} onSubmit={this.handleSubmit}>\n//         <label className={style.label} htmlFor={this.loginInputId}>\n//           Name\n//           <input\n//             className={style.input}\n//             type=\"text\"\n//             name=\"name\"\n//             placeholder=\"Name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             id={this.loginInputId}\n//             value={this.state.name}\n//             onChange={this.handleChange}\n//           />\n//         </label>\n\n//         <label className={style.label} htmlFor={this.numberInputId}>\n//           Namber\n//           <input\n//             className={style.input_number}\n//             type=\"tel\"\n//             name=\"number\"\n//             placeholder=\"Namber\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             id={this.numberInputId}\n//             value={this.state.number}\n//             onChange={this.handleChange}\n//           />\n//         </label>\n//         <button className={style.button} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// FormAddContact.protoType = {\n//   onSubmit: PropTypes.func,\n// };\n\n// export default FormAddContact;\n","import PropTypes from 'prop-types';\nimport style from './ContactsList.module.css';\n\nconst ContactsList = ({ contacts, deleteContact }) => {\n  // console.log(contacts);\n\n  return (\n    <ul className={style.list}>\n      {contacts.map(contact => {\n        return (\n          <li className={style.item} key={contact.id}>\n            <span>\n              {contact.name}: {contact.number}\n            </span>\n\n            <button\n              className={style.button}\n              type=\"button\"\n              id={contact.id}\n              onClick={() => deleteContact(contact.id)}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.array,\n  deleteContact: PropTypes.func,\n};\n\nexport default ContactsList;\n","import PropTypes from 'prop-types';\nimport style from './Filter.module.css';\n\nconst Filter = ({ filter, onChangeFilter }) => {\n  return (\n    <label className={style.label}>\n      Find contacts by name\n      <input\n        className={style.input}\n        type=\"text\"\n        name=\"filter\"\n        onChange={onChangeFilter}\n        value={filter}\n      ></input>\n    </label>\n  );\n};\n\nFilter.protoType = {\n  filter: PropTypes.string,\n  onChangeFilter: PropTypes.func,\n};\n\nexport default Filter;\n","import { useState, useEffect } from 'react';\nimport Container from './components/Container/Container';\nimport Section from './components/Section/Section';\nimport FormAddContact from './components/FormAddContact/FormAddContact';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport Filter from './components/Fliter/Filter';\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(localStorage.getItem('contacts')) ?? [];\n  });\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const addContact = data => {\n    if (contacts.some(contact => contact.name.includes(data.name))) {\n      return alert(`${data.name} is already in contacts!`);\n    }\n\n    setContacts([...contacts, data]);\n  };\n\n  const deleteContact = currentId => {\n    setContacts([...contacts.filter(contact => contact.id !== currentId)]);\n  };\n\n  const changeFilter = event => {\n    setFilter(event.currentTarget.value.toLocaleLowerCase());\n  };\n\n  const onFilter = () => {\n    return contacts.filter(contact =>\n      contact.name.toLocaleLowerCase().includes(filter),\n    );\n  };\n\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <FormAddContact onSubmit={addContact} />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter filter={filter} onChangeFilter={changeFilter} />\n\n        {filter === '' ? (\n          <ContactsList contacts={contacts} deleteContact={deleteContact} />\n        ) : (\n          <ContactsList contacts={onFilter()} deleteContact={deleteContact} />\n        )}\n      </Section>\n    </Container>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       //   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       //   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       //   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       //   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//     name: '',\n//     number: '',\n//   };\n\n//   addContact = data => {\n//     // console.log(data);\n//     this.setState(prevState => {\n//       if (\n//         prevState.contacts.some(contact => contact.name.includes(data.name))\n//       ) {\n//         return alert(`${data.name} is already in contacts!`);\n//       }\n\n//       return { contacts: [...prevState.contacts, data] };\n//     });\n//   };\n\n//   deleteContact = currentId => {\n//     this.setState(prevState => {\n//       return {\n//         contacts: [\n//           ...prevState.contacts.filter(contact => contact.id !== currentId),\n//         ],\n//       };\n//     });\n//   };\n\n//   changeFilter = event => {\n//     this.setState({ filter: event.currentTarget.value.toLocaleLowerCase() });\n//   };\n\n//   onFilter = () => {\n//     const { contacts, filter } = this.state;\n\n//     return contacts.filter(contact =>\n//       contact.name.toLocaleLowerCase().includes(filter),\n//     );\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n\n//     // console.log(contacts);\n//     // console.log(parsedContacts);\n\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       // console.log('Обновились контакты');\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//     // console.log(prevProps);\n//     // console.log(this.state);\n//   }\n\n//   // handleNameChange = event => {\n//   //   this.setState({ name: event.currentTarget.value });\n//   // };\n\n//   // handleNumberChange = event => {\n//   //   this.setState({ number: event.currentTarget.value });\n//   // };\n\n//   render() {\n//     return (\n//       <Container>\n//         <Section title=\"Phonebook\">\n//           <FormAddContact onSubmit={this.addContact} />\n\n//           {/* <h3>Name</h3>\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             value={this.state.name}\n//             onChange={this.handleNameChange}\n//           />           */}\n//         </Section>\n\n//         <Section title=\"Contacts\">\n//           <Filter\n//             filter={this.state.filter}\n//             onChangeFilter={this.changeFilter}\n//           />\n//           {this.state.filter === '' ? (\n//             <ContactsList\n//               contacts={this.state.contacts}\n//               deleteContact={this.deleteContact}\n//             />\n//           ) : (\n//             <ContactsList\n//               contacts={this.onFilter()}\n//               deleteContact={this.deleteContact}\n//             />\n//           )}\n//         </Section>\n//       </Container>\n//     );\n//   }\n// }\n\n// export default App;\n","import './index.css';\nimport React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App';\n\nReactDom.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__35IlQ\",\"item\":\"ContactsList_item__2e1AU\",\"button\":\"ContactsList_button__3PBIs\"};"],"sourceRoot":""}